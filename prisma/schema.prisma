// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 学院模型
model Department {
  id          String   @id @unique @default(uuid()) @db.VarChar(255)
  name        String   @db.VarChar(100)
  code        String   @unique @db.VarChar(20)
  description String?  @db.Text
  students    Student[]
  teachers    Teacher[]
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("departments")
}

// 学生模型
model Student {
  studentId      String        @id @unique @db.VarChar(20)
  password       String        @db.VarChar(100)
  role           Int           @default(0)
  name           String        @db.VarChar(50) @default("")
  departmentId   String        @default("")
  department     Department?   @relation(fields: [departmentId], references: [id])
  major          String        @db.VarChar(100) @default("") // 将major改为字符串类型
  grade          String        @db.VarChar(20) @default("")
  class          String        @db.VarChar(50) @default("")
  email          String        @unique @db.VarChar(100) @default("student@example.com")
  phone          String?       @db.VarChar(20)
  enrollmentDate DateTime      @default(now())
  status         String        @db.VarChar(20) @default("active") // active, suspended, graduated
  courseEnrollments CourseEnrollment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("students")
}

// 教师模型
model Teacher {
  teacherId      String        @id @unique @db.VarChar(20)
  password       String        @db.VarChar(100)
  role           Int           @default(1)
  name           String        @db.VarChar(50) @default("")
  departmentId   String        @default("")
  department     Department?   @relation(fields: [departmentId], references: [id])
  major          String        @db.VarChar(100) @default("") // 将majors改为字符串类型
  rank           String        @db.VarChar(50) @default("") // 教授, 副教授, 讲师等
  email          String        @unique @db.VarChar(100) @default("teacher@example.com")
  phone          String?       @db.VarChar(20)
  office         String?       @db.VarChar(100)
  hireDate       DateTime      @default(now())
  status         String        @db.VarChar(20) @default("active") // active, onLeave, resigned
  courses        Course[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("teachers")
}

// 管理员模型
model Admin {
  adminId   String   @id @unique @db.VarChar(20)
  password  String   @db.VarChar(100)
  role      Int      @default(2)
  name      String   @db.VarChar(50) @default("Admin")
  email     String   @unique @db.VarChar(100) @default("admin@example.com")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("admins")
}

// 课程模型
model Course {
  id          String            @id @unique @default(uuid()) @db.VarChar(255)
  name        String            @db.VarChar(100) @default("")
  code        String            @unique @db.VarChar(20) @default("")
  teacherId   String            @default("")
  teacher     Teacher?          @relation(fields: [teacherId], references: [teacherId])
  departmentId String           @default("")
  department  Department?       @relation(fields: [departmentId], references: [id])
  type        String            @db.VarChar(50) @default("专业课程") // 新增：课程类型
  credits     Int               @default(0)
  description String?           @db.Text
  status      String            @db.VarChar(20) @default("active") // active, inactive, pending
  schedule    Json?             // 存储课程安排信息
  studentCount Int              @default(0)
  courseEnrollments CourseEnrollment[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("courses")
}

// 课程选修关系模型
model CourseEnrollment {
  id        String   @id @default(uuid())
  studentId String   @default("")
  student   Student? @relation(fields: [studentId], references: [studentId])
  courseId  String   @default("")
  course    Course?  @relation(fields: [courseId], references: [id])
  enrolledAt DateTime @default(now())
  status    String   @db.VarChar(20) @default("enrolled") // enrolled, dropped, completed

  @@unique([studentId, courseId])
  @@map("course_enrollments")
}